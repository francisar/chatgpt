// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/francisar/chatgpt/v1/microservice.proto

package francisar_chatgpt_v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/francisar/chatgpt/v1/microservice.proto", fileDescriptor_675cde845bd19763)
}
func init() {
	golang_proto.RegisterFile("api/francisar/chatgpt/v1/microservice.proto", fileDescriptor_675cde845bd19763)
}

var fileDescriptor_675cde845bd19763 = []byte{
	// 923 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x4d, 0x6c, 0x1b, 0x45,
	0x14, 0x80, 0xbd, 0x4e, 0x02, 0xc9, 0x50, 0xd4, 0xb2, 0x58, 0x42, 0x58, 0x62, 0x35, 0x6c, 0xc5,
	0x25, 0xd4, 0xb3, 0x6b, 0xb7, 0xe5, 0x60, 0xa9, 0x42, 0x6e, 0x6a, 0xca, 0x4f, 0x05, 0x91, 0x93,
	0xf6, 0x60, 0xd4, 0xc3, 0x7a, 0x33, 0x59, 0xaf, 0x6a, 0xef, 0x2c, 0xbb, 0xe3, 0x54, 0x21, 0x8a,
	0x14, 0x87, 0x00, 0x21, 0x8d, 0xe2, 0x28, 0x84, 0xa2, 0x26, 0x02, 0x82, 0xda, 0x8a, 0x5c, 0x48,
	0x5b, 0x89, 0x92, 0xd4, 0x31, 0x35, 0xc7, 0x1c, 0x8b, 0xb8, 0x70, 0x84, 0xd8, 0xbb, 0xb6, 0x4f,
	0x96, 0xb8, 0x23, 0xa1, 0x5d, 0xaf, 0xdd, 0xd0, 0x98, 0x5e, 0x46, 0xf3, 0xe6, 0x7d, 0xf3, 0xde,
	0xbc, 0xbf, 0x01, 0xaf, 0x4b, 0xba, 0x2a, 0x8c, 0x1b, 0x92, 0x26, 0xab, 0xa6, 0x64, 0x08, 0x72,
	0x5a, 0xa2, 0x8a, 0x4e, 0x85, 0x89, 0xb0, 0x90, 0x55, 0x65, 0x83, 0x98, 0xd8, 0x98, 0x50, 0x65,
	0x8c, 0x74, 0x83, 0x50, 0xc2, 0x06, 0x3a, 0x20, 0xf2, 0x40, 0x34, 0x11, 0x0e, 0x86, 0x14, 0x95,
	0xa6, 0x73, 0x29, 0x24, 0x93, 0xac, 0xa0, 0x10, 0x85, 0x08, 0x2e, 0x9c, 0xca, 0x8d, 0xbb, 0x92,
	0x2b, 0xb8, 0xbb, 0x96, 0x91, 0xe0, 0x1b, 0x07, 0x71, 0x43, 0x97, 0xdd, 0x25, 0xe4, 0x61, 0x8e,
	0x9c, 0xc6, 0x52, 0x86, 0xa6, 0x9d, 0x27, 0xb4, 0x76, 0xde, 0xbd, 0x33, 0xff, 0x71, 0x43, 0x94,
	0x0c, 0x96, 0x74, 0xd5, 0x3c, 0xbc, 0x15, 0x9c, 0x88, 0x24, 0x4d, 0x23, 0x54, 0xa2, 0x2a, 0xd1,
	0x4c, 0xef, 0xfa, 0xc8, 0x13, 0x6e, 0x43, 0x58, 0x26, 0xe6, 0xa4, 0x49, 0xb1, 0x27, 0x2a, 0x12,
	0xc5, 0x57, 0xa5, 0xc9, 0xd6, 0xe3, 0xe5, 0x90, 0x82, 0xb5, 0x90, 0x79, 0x55, 0x52, 0x14, 0x6c,
	0x08, 0x44, 0x77, 0x0d, 0x75, 0x31, 0x7a, 0xfc, 0x7f, 0xb3, 0x37, 0x86, 0xb3, 0x5e, 0xc0, 0x91,
	0x7f, 0xfa, 0xc0, 0xb1, 0xb7, 0xda, 0xcc, 0x50, 0x0b, 0x61, 0x57, 0xfd, 0xe0, 0xb9, 0xb7, 0xdd,
	0xf0, 0x86, 0xd2, 0x58, 0xbe, 0xc2, 0xf2, 0xc8, 0x79, 0x05, 0xf2, 0x22, 0x9e, 0x08, 0xa3, 0x03,
	0xca, 0x04, 0xfe, 0x28, 0x87, 0x4d, 0x1a, 0x3c, 0xfe, 0x54, 0xc6, 0xd4, 0x89, 0x66, 0x62, 0x7e,
	0x97, 0x59, 0x89, 0xfd, 0xc0, 0x80, 0x7e, 0x55, 0xa3, 0xd8, 0xd0, 0xa4, 0x0c, 0x7b, 0xc4, 0xca,
	0xdf, 0xb6, 0x8a, 0xdb, 0xf6, 0xcd, 0x19, 0xfb, 0xfe, 0xb5, 0xe0, 0x22, 0x53, 0xbf, 0xb3, 0x6d,
	0x2d, 0x7c, 0x6f, 0xcd, 0x6f, 0x34, 0x6e, 0xdc, 0x6a, 0x96, 0xf2, 0x00, 0xda, 0x4b, 0xb7, 0xad,
	0xc2, 0x4d, 0x7b, 0xa3, 0x64, 0x95, 0x0a, 0xcd, 0xd2, 0x9a, 0x97, 0xf5, 0x8f, 0xdf, 0xf4, 0x6a,
	0x7f, 0xe6, 0x71, 0xa9, 0x51, 0x27, 0x54, 0x00, 0xeb, 0x77, 0xb6, 0xed, 0x7b, 0xb3, 0xf6, 0xfc,
	0xb2, 0xb5, 0xf0, 0x5d, 0x7d, 0xab, 0xdc, 0xf8, 0x7a, 0xab, 0xb6, 0xf0, 0xb3, 0x3d, 0x93, 0xaf,
	0x6d, 0xe4, 0x23, 0xa2, 0xd8, 0x2c, 0x2d, 0x56, 0x77, 0x56, 0xad, 0xcf, 0x3e, 0xb5, 0xb6, 0x1e,
	0x54, 0x77, 0x8a, 0xcd, 0xd2, 0xda, 0x14, 0x6f, 0x52, 0x89, 0xe6, 0x4c, 0x3e, 0x0a, 0xf9, 0x91,
	0x78, 0xe2, 0xd2, 0x3b, 0xef, 0x9f, 0xe7, 0xa7, 0x67, 0x7f, 0xaf, 0x7e, 0xe9, 0x07, 0x6c, 0x7f,
	0xdb, 0x27, 0xfb, 0x5b, 0x0f, 0xe8, 0x3d, 0x87, 0xb3, 0x84, 0x7d, 0x15, 0x75, 0xeb, 0x35, 0xe4,
	0xe8, 0xda, 0xe9, 0xe0, 0x9f, 0x86, 0x78, 0xd9, 0xc8, 0xf7, 0xac, 0xc4, 0xfe, 0x66, 0x40, 0xaf,
	0x53, 0x0e, 0xf6, 0xa5, 0xda, 0xad, 0x62, 0xf5, 0xe1, 0xb5, 0x44, 0x7c, 0x64, 0x74, 0x3c, 0x97,
	0x11, 0x12, 0xc3, 0x43, 0xad, 0xd0, 0x83, 0xbb, 0x4c, 0xbd, 0x7c, 0xa3, 0xf1, 0xf9, 0xa2, 0x95,
	0x5f, 0xab, 0xee, 0xcc, 0x54, 0x8b, 0xeb, 0xf5, 0x87, 0x9f, 0x34, 0xbe, 0x2a, 0xd7, 0xd6, 0xe6,
	0xaa, 0xbf, 0x94, 0x6b, 0xab, 0x9b, 0x76, 0xa1, 0x50, 0x2f, 0xdf, 0x05, 0x30, 0x8c, 0xe0, 0xf0,
	0x07, 0x23, 0xa3, 0xb0, 0xb6, 0xba, 0x59, 0x2d, 0x2e, 0x59, 0xf3, 0xeb, 0xd6, 0x6e, 0xb1, 0x7e,
	0x7f, 0xce, 0x2e, 0x2e, 0x37, 0x4b, 0x8b, 0x8d, 0x6f, 0xbe, 0xb5, 0x1e, 0xcc, 0xd6, 0x7e, 0xfc,
	0x02, 0xc0, 0x08, 0x82, 0xe7, 0xe3, 0x6d, 0xac, 0xbe, 0xb4, 0x6d, 0x15, 0xae, 0x77, 0xb0, 0x36,
	0x73, 0x12, 0xc1, 0xe1, 0x8b, 0x6d, 0xc6, 0x5e, 0xff, 0xc9, 0xbe, 0x7e, 0xf7, 0x10, 0x73, 0x0a,
	0xc1, 0x73, 0xf1, 0x0b, 0xf1, 0xd1, 0x78, 0xc7, 0xa3, 0x53, 0xb4, 0x27, 0xb0, 0x77, 0x5f, 0x04,
	0x3d, 0x11, 0xf1, 0x14, 0x7b, 0x04, 0x00, 0x8d, 0x40, 0x99, 0x68, 0x14, 0x6b, 0xd4, 0x4d, 0xec,
	0x1c, 0xc3, 0x0f, 0xb8, 0xd3, 0xe0, 0x44, 0x1f, 0x65, 0x06, 0x93, 0x01, 0xf6, 0xb1, 0x9c, 0x7a,
	0xd6, 0x43, 0x93, 0xaf, 0xb0, 0xc7, 0x3a, 0xa7, 0xc2, 0x54, 0x2e, 0xa7, 0x8e, 0x4d, 0xa7, 0x06,
	0x74, 0xa2, 0x29, 0xc8, 0x59, 0x92, 0x5c, 0xf0, 0x90, 0x3a, 0xda, 0xab, 0xab, 0x9a, 0x92, 0x72,
	0xd7, 0xe4, 0xcb, 0x83, 0x87, 0xaf, 0xf7, 0xe1, 0xac, 0x4e, 0x27, 0x53, 0xbd, 0x8e, 0x81, 0xb3,
	0xf7, 0xfc, 0x2b, 0xb1, 0xbc, 0x9f, 0xbd, 0x08, 0x02, 0xdd, 0x3a, 0x89, 0x87, 0xa0, 0x5f, 0x49,
	0x0c, 0x0f, 0xc1, 0xf7, 0x54, 0xca, 0x06, 0xd2, 0x94, 0xea, 0x66, 0x54, 0x68, 0x8d, 0xe4, 0x15,
	0x95, 0x3a, 0xe3, 0x3a, 0x18, 0x00, 0x6c, 0x4c, 0x97, 0xe4, 0x34, 0x86, 0x17, 0x54, 0x19, 0x6b,
	0x26, 0x86, 0x11, 0x24, 0x46, 0xfa, 0x44, 0x14, 0x46, 0x62, 0xf0, 0xb5, 0x6e, 0x46, 0x91, 0xa4,
	0xab, 0xe8, 0xa0, 0x8d, 0xc4, 0x65, 0xd0, 0x73, 0x5a, 0x14, 0xd9, 0x4b, 0x60, 0x74, 0x8a, 0x97,
	0xc9, 0x18, 0xe6, 0xa3, 0xf0, 0xb4, 0x28, 0x9e, 0x80, 0x3c, 0x36, 0x0c, 0x62, 0x38, 0x4d, 0xd9,
	0x1e, 0x18, 0xd8, 0x3a, 0x39, 0x01, 0xf9, 0x2c, 0x36, 0x4d, 0x49, 0xc1, 0xdd, 0x95, 0x63, 0x98,
	0x4a, 0x6a, 0xc6, 0x69, 0xe7, 0x0f, 0x2f, 0x4f, 0x27, 0x5f, 0x00, 0x47, 0xc1, 0xc0, 0x59, 0xc9,
	0x54, 0xe5, 0x58, 0x8e, 0xa6, 0x59, 0x7f, 0x3f, 0x93, 0x3a, 0x0a, 0x9e, 0x3f, 0x78, 0xe4, 0xdb,
	0xfb, 0x8b, 0x63, 0x36, 0xf7, 0x39, 0x66, 0x6f, 0x9f, 0x63, 0x1e, 0xed, 0x73, 0xcc, 0x9f, 0xfb,
	0x1c, 0xb3, 0x5c, 0xe1, 0x7c, 0x9b, 0x15, 0x8e, 0xf9, 0xb5, 0xc2, 0x31, 0x7b, 0x15, 0xce, 0xf7,
	0xa8, 0xc2, 0xf9, 0xfe, 0xa8, 0x70, 0xbe, 0xd4, 0x33, 0xee, 0xd7, 0x71, 0xf2, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x44, 0x18, 0x9d, 0xef, 0x9f, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrancisarChatgptClient is the client API for FrancisarChatgpt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrancisarChatgptClient interface {
	HealthCheck(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error)
	Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error)
}

type francisarChatgptClient struct {
	cc *grpc.ClientConn
}

func NewFrancisarChatgptClient(cc *grpc.ClientConn) FrancisarChatgptClient {
	return &francisarChatgptClient{cc}
}

func (c *francisarChatgptClient) HealthCheck(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error) {
	out := new(grpc_health_v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/francisar.chatgpt.v1.FrancisarChatgpt/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *francisarChatgptClient) Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error) {
	out := new(DemoResponse)
	err := c.cc.Invoke(ctx, "/francisar.chatgpt.v1.FrancisarChatgpt/Demo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrancisarChatgptServer is the server API for FrancisarChatgpt service.
type FrancisarChatgptServer interface {
	HealthCheck(context.Context, *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error)
	Demo(context.Context, *DemoRequest) (*DemoResponse, error)
}

// UnimplementedFrancisarChatgptServer can be embedded to have forward compatible implementations.
type UnimplementedFrancisarChatgptServer struct {
}

func (*UnimplementedFrancisarChatgptServer) HealthCheck(ctx context.Context, req *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedFrancisarChatgptServer) Demo(ctx context.Context, req *DemoRequest) (*DemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demo not implemented")
}

func RegisterFrancisarChatgptServer(s *grpc.Server, srv FrancisarChatgptServer) {
	s.RegisterService(&_FrancisarChatgpt_serviceDesc, srv)
}

func _FrancisarChatgpt_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_health_v1.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrancisarChatgptServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/francisar.chatgpt.v1.FrancisarChatgpt/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrancisarChatgptServer).HealthCheck(ctx, req.(*grpc_health_v1.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrancisarChatgpt_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrancisarChatgptServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/francisar.chatgpt.v1.FrancisarChatgpt/Demo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrancisarChatgptServer).Demo(ctx, req.(*DemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrancisarChatgpt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "francisar.chatgpt.v1.FrancisarChatgpt",
	HandlerType: (*FrancisarChatgptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _FrancisarChatgpt_HealthCheck_Handler,
		},
		{
			MethodName: "Demo",
			Handler:    _FrancisarChatgpt_Demo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/francisar/chatgpt/v1/microservice.proto",
}
